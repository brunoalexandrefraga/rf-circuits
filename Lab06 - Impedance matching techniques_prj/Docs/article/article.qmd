---
title: Prática de Adaptação de Impedância 
subtitle: Laboratório 06
author:
  - name: Bruno Alexandre Fraga
    email: bruno.fraga@posgrad.ufsc.br
    affiliations: 
        - id: some-tech
          name: Universidade Federal de Santa Catarina
          department: Departamento de Engenharia Elétrica e Eletrônica
          address: R. Delfino Conti
          city: Florianópolis
          state: Santa Catarina
          postal-code: 88040-370
abstract: |
  Este trabalho tem por objetivo consolidar a técnica de projeto de redes de casamento de impedância, em especial a técnica pela rede L. Para isso, é proposto realizar o casamento de impedância da saída de um amplificador para uma carga de 50 $\Omega$ de modo que a eficiência da potência dissipada na carga seja de 80%. Após algumas análises o projeto foi concluído com sucesso e realizada uma simulação Monte Carlo com 100 iterações para verificar a robustez do projeto por técnicas estatísticas. Os resultados obtidos foram brevemente discutidos.
keywords: 
  - Robustez
  - Adaptação de impedância
  - Análise estatística
date: last-modified
bibliography: bibliography.bib
format:
  elsevier-pdf:
    include-in-header:
      - text: |
          \usepackage{steinmetz}
          \usepackage[a4paper, margin=1in]{geometry}
          \usepackage{graphicx} % Required for inserting images
          \usepackage{circuitikz}
          \usepackage{amsmath}
          \usepackage{amssymb}
          \usepackage{amsthm}

          \newcommand{\parallelsum}{\mathbin{\!/\mkern-5mu/\!}}
    keep-tex: true
    journal:
      name: RF Circuits
      formatting: preprint
      # model: 3p # Don't set a model with preprint
      cite-style: number
---

# Desenvolvimento
## Admitância ideal

O circuito original é apresentado na Fig.\ref{fig:original-circuit}.

```{=latex}
\begin{figure}[h]
  \centering
    \begin{circuitikz}[american]
      \draw (1.5, 0.5) coordinate(point1) to[R, l=$G_s$] ++(0, -4.5) coordinate(point2) node[ground]{} to[short] ++(-2.5, 0) to[isource, l=$I_s$] ++(0, 4.5) to[short] (point1) to[short, -*] ++(2, 0) coordinate(point3) to[L, l=$B_s$, a=$L_s$, *-] ++(0, -4.5) coordinate(point4) to[short] (point2) ;
      \draw (point3) to[short, *-] ++(2.5, 0) to[generic, l=$Y_L$, i>^=$I_L$] ++(0, -4.5) to[short] (point4) ;

      % Add the marker for V_{L}
      \node at (point3) [above right] [above] {$V_{L}$};
    \end{circuitikz}
  \caption{Circuito original}
  \label{fig:original-circuit}
\end{figure}
```

Parte-se da restrição principal em que a carga $Y_L$ dissipa uma certa potência com uma eficiência de 80%. Dessa forma, calcula-se

$$
  \eta=\frac{P_L}{P_s}
$$

Em que a potência dissipada na carga, $P_L$, é dada pela seguinte expressão

$$
  P_L=\frac{1}{2}\mathfrak{R}\left\{V_LI_L^*\right\}
$$

sendo $V_L$ a tensão na carga e $I_L^*$ o conjugado da corrente que passa pela mesma.

$$
  I_L=\frac{I_sY_L}{Y_s+Y_L}
$$

e, que $Y_s=G_s+jB_s$, sendo $G_s=1/R_s$ e $B_s=-1/(\omega L)$

$$
  V_L=\frac{I_s}{Y_s+Y_L}
$$

Calculando $P_L$, obtém-se

$$
  \begin{split}
    P_L=\frac{1}{2}\frac{|I_s|^2}{|Y_s+Y_L|^2}\mathfrak{R}\left\{Y_L^*\right\}
  \end{split}
$$ {#eq-power-load}


A variável $P_s$, por sua vez é dada por

$$
  \begin{split}
    P_s&=\frac{1}{2}\mathfrak{R}\left\{V_LI_s^*\right\}\implies\\
    &=\frac{|I_s|^2}{2\mathfrak{R}\left\{(Y_s+Y_L)\right\}}\implies\\
    &=\frac{|I_s|^2\mathfrak{R}\left\{(Y_s+Y_L)^*\right\}}{2\mathfrak{R}\left\{(Y_s+Y_L)\right\}\mathfrak{R}\left\{(Y_s+Y_L)^*\right\}}\implies\\
    &=\frac{|I_s|^2\mathfrak{R}\left\{(Y_s+Y_L)^*\right\}}{2|Y_s+Y_L|^2}
  \end{split}
$$

Assim, o cálculo da eficiência é realizado da seguinte forma

$$
  \begin{split}
    \eta&=\frac{|I_s|^2\mathfrak{R}\left\{Y_L^*\right\}}{2|Y_s+Y_L|^2}\cdot\frac{2|Y_s+Y_L|^2}{|I_s|^2\mathfrak{R}\left\{(Y_s+Y_L)^*\right\}}\implies\\
    &=\frac{\mathfrak{R}\left\{Y_L^*\right\}}{\mathfrak{R}\left\{(Y_s+Y_L)^*\right\}}\implies\\
    &=\frac{\mathfrak{R}\left\{(G_L+jB_L)^*\right\}}{\mathfrak{R}\left\{(G_s+jB_s+G_L+jB_L)^*\right\}}\implies\\
    &=\frac{\mathfrak{R}\left\{(G_L+jB_L)^*\right\}}{\mathfrak{R}\left\{[G_s+G_L+j(B_s+B_L)]^*\right\}}\implies\\
    &=\frac{\mathfrak{R}\left\{G_L-jB_L\right\}}{\mathfrak{R}\left\{G_s+G_L-j(B_s+B_L)\right\}}\implies\\
    &=\frac{G_L}{G_s+G_L}
  \end{split}
$$

Dessa forma, deseja-se obter uma equação para $Y_L$.

$$
  \begin{split}
    G_L&=(G_s+G_L)\eta\implies\\
    G_L-\eta G_L&=\eta G_s\implies\\
    G_L(1-\eta)&=\eta G_s\implies\\
    G_L&=G_s\frac{\eta}{1-\eta}
  \end{split}
$$

Para uma eficiência de 80%, a relação anterior resulta em $G_L=4G_s$. A seguir, busca-se determinar a parte imaginária da admitância de carga, ou seja, determinar $B_L$. O problema em questão exige que o amplificador transfira a máxima potência possível com uma eficiência de 80%. Essa máxima potência possível traduz-se em realizar uma análise de forma a maximizar a potência fornecida pelo amplificador, $P_s$. Relembrando a equação,

$$
  \begin{split}
    P_s&=\frac{|I_s|^2\mathfrak{R}\left\{(Y_s+Y_L)^*\right\}}{2|Y_s+Y_L|^2}\implies\\
    &=\frac{|I_s|^2(G_s+G_L)}{2(G_s+G_L)^2+2(B_L+B_s)^2}
  \end{split}
$$

A seguir, demonstra-se matematicamente como que a função $P_s$ pode ser minimizada em função de $B_L$.

$$
  \frac{\partial P_s}{\partial B_L}=0\implies
$$
$$
  \frac{\partial}{\partial B_L}\left[\frac{|I_s|^2(G_s+G_L)}{2(G_s+G_L)^2+2(B_L+B_s)^2}\right]=0
$$

Como o valor de $I_s$ já é conhecido, pode-se remover o símbolo de módulo. Além disso, uma forma simples de se calcular essa derivada é utilizando a regra do quosciente, ou seja,

$$
  \frac{\partial}{\partial B_L}\left[\frac{f(B_L)}{g(B_L)}\right]=\frac{f'(B_L)g(B_L)-f(B_L)g'(B_L)}{[g(B_L)]^2}
$$

em que $f(B_L)=I_s^2(G_s + G_L)$ e $g(B_L)=2(G_s+G_L)^2+2(B_L+B_s)^2$.

Como $f(B_L)$ não depende de $B_L$, $f'(B_L)=0$. E a derivada de $g(B_L)$ é dada por

$$
  \begin{split}
    g'(B_L)&=\left[2(B_L+B_s)^2\right]^{'}\implies\\
    &=2(B_L^2+2B_LB_s+B_s^2)^{'}\implies\\
    &=4(B_L+B_s)\implies\\
  \end{split}
$$

Calculando a derivada completa, obtém-se

$$
  \begin{split}
    \frac{\partial P_s}{\partial B_L}&=\frac{-I_s^2(G_s + G_L)4(B_L+B_s)}{[4(B_L+B_s)]^2}=0\implies\\
    B_L&=-B_s=\frac{1}{\omega L}
  \end{split}
$$

Finalmente, é possível calcular um valor de admitância de carga,

$$
  \begin{split}
    Y_L&=G_L+jB_L\implies\\
    &=G_s\frac{\eta}{1-\eta}+j\frac{1}{\omega L}\implies\\
  \end{split}
$$

```{python}
#| echo: false
import numpy as np
# Definição das constantes
eta = 0.80 # Eficiência
Rs = 65 # Resistência de fonte
Gs = 1 / Rs # Condutância
Ls = 10e-9 # Indutância em Henry
f = 2.4e9 # Frequência em Hz
omega = 2 * np.pi * f # Frequência angular
RL = 50 # Resistência de carga
Bs = -1 / (omega*Ls) # Condutância
Is = 100e-3
```

```{python}
#| echo: false
def format(value):
    if value >= 1e9:
        return f"{value / 1e9:.2f} G"
    elif value >= 1e6:
        return f"{value / 1e6:.2f} M"
    elif value >= 1e3:
        return f"{value / 1e3:.2f} k"
    elif value >= 1:
        return f"{value:.2f} "
    elif value >= 1e-3:
        return f"{value * 1e3:.2f} m"
    elif value >= 1e-6:
        return f"{value * 1e6:.2f} μ"
    elif value >= 1e-9:
        return f"{value * 1e9:.2f} n"
    elif value >= 1e-12:
        return f"{value * 1e12:.2f} p"
    elif value >= 1e-15:
        return f"{value * 1e12:.2f} p"
    else:
        return f"{value:.0e} "
```

Aplicando os valores $\eta =$ `{python} eta*100`%, $G_s = 1/R_s$, $R_s =$ `{python} format(Rs)`$\Omega$, $L =$ `{python} format(Ls)`H e $\omega=2\pi f$, em que $f =$ `{python} format(f)`Hz.

```{python}
#| echo: false
# Função que calcula G_s * (eta / (1 - eta))
def load_admittance(Gs, eta):
    return Gs * (eta / (1 - eta))

# Função que calcula 1 / (omega * L)
def load_susceptance(omega, L):
    return 1 / (omega * L)
```

```{python}
#| echo: false
GL = load_admittance(Gs, eta)
admittance_value = GL * 1000  # Multiplica por 1000 para converter para mS
formatted_admittance = f"{admittance_value:.2f}"    # Formata para 2 casas decimais

BL = load_susceptance(omega, Ls)
susceptance_value = BL * 1000  # Multiplica por 1000 para converter para mS
formatted_susceptance = f"{susceptance_value:.2f}"    # Formata para 2 casas decimais
```

$$
  \begin{split}
    Y_L&=\frac{1}{65}\cdot\frac{0,8}{1-0,8}+j\frac{1}{2\cdot \pi\cdot 2,4\cdot 10^9\cdot 10\cdot 10^{-9}}\implies\\
    &=\frac{4}{65}+j\frac{1}{48\pi}
  \end{split}
$$


```{python}
#| echo: false
# Função que calcula G_s * (eta / (1 - eta))
def load_resistence(GL, BL):
    RL = GL/(GL**2 + BL**2)
    return RL

# Função que calcula 1 / (omega * L)
def load_reactance(GL, BL):
    BL = BL/(GL**2 + BL**2)
    return BL
```

```{python}
#| echo: false
def format_2_decimals(value):
    return f"{value:.2f}"
```

Finalmente, obtém-se o valor $Y_L =$ `{python} formatted_admittance` + j`{python} formatted_susceptance` mS. Semelhantemente, obtém-se uma impedância de carga, $Z_L =$ `{python} format_2_decimals(load_resistence(GL, BL))` - j`{python} format_2_decimals(load_reactance(GL, BL))` $\Omega$. Assim, obtém-se que para que para que a carga dissipe potência com uma eficiência, $\eta$ de `{python} eta*100`%, esta deve ter como parte real da sua admitância, $G_L =$ `{python} formatted_admittance` mS. Além disso, foi demonstrado que, para que o amplificador forneça a máxima potência possível, essa carga deve ter uma parte imaginária de admitância, $B_L$, igual a `{python} formatted_susceptance` mS.

Além disso, pode-se obter o valor da potência máxima transmitida à carga. Partindo da [Eq. @eq-power-load], obtém-se

$$
  P_L=\frac{I_s^2G_L}{2\left(G_s+G_L\right)^2}
$$

```{python}
#| echo: false
PL=max_PL=(Is**2 * GL)/(2*(Gs+GL)**2)
```

Finalmente, obtém-se uma impedância máxima $P_L =$ `{python} format(max_PL)`W.

A seguir, são apresentadas as verificações no simulador QucsStudio. Para realizar as devidas verificações, toma-se como base o circuito da [Fig. @fig-circuit-qucs-original]. Em essência, o circuito apresentado é o mesmo fornecido com o problema, com a inclusão de um monopolo que serve como uma carga aterrada (esse bloco foi selecionado, pois permite informar uma admitância).

![Circuito para verificação da admitância obtida](../images/Qucs-circuit-reference.png){width=300, #fig-circuit-qucs-original}

Na [Fig. @fig-y-real-validation] é possível verificar que se a curva da da eficiência de potência na carga for traçada em função da parte real da admitância de carga, $G_L$, o valor que atinge `{python} eta*100`% é exatamente o que foi obtido anteriormente.

![Validação da parte real da admitância (condutância) de carga](../images/GLxEta_validation.png){width=300, #fig-y-real-validation}

Além disso, a [Fig. @fig-y-imaginary-validation] demonstra que a eficiência de potência na carga não varia em nada com a susceptância da carga, conforme previsto.

![Validação da parte imaginária da admitância (susceptância) de carga](../images/BLxEta_validation.png){width=300, #fig-y-imaginary-validation}

Outra validação que é necessária é em relação ao valor da susceptância de carga, $B_L$. Nesse caso, a restrição diz que, dada a eficiência de `{python} eta*100`%, a amplificador deve transmitir a maior potência possível à carga. Além de validar a susceptância da carga, também pode ser realizada a validação da potência dissipada pela carga. Para isso, é realizada a adaptação da [Eq. @eq-power-load] para aplicar os valores obtidos anteriormente.

$$
  P_L=\frac{I_s^2G_L}{2(G_s + G_L)^2 + 2(B_s + B_L)^2}
$$ {#eq-power-load-formatted}

Como a restrição para a máxima transferência de energia (possível para a eficiência desejada) impõe que $B_s=-B_L$, a [Eq. @eq-power-load-formatted] pode ser escrita como

$$
  P_L=\frac{I_s^2G_L}{2(G_s + G_L)^2}
$$ {#eq-power-load-finished}

```{python}
#| echo: false
def calculate_power_load():
  return (Is**2*GL)/(2*(Gs+GL)**2)
```

Aplicando os valores à equação [Eq. @eq-power-load-finished] obtém-se uma potência $P_L =$ `{python} format(calculate_power_load())`W. Todos esses valores que foram previstos matematicamente podem ser visualizados na [Fig. @fig-y-imaginary-validation], em que é apresentado o gráfico da potência na carga pela susceptância da carga. Além disso, a função `max` do QucsStudio foi utilizada para obter o ponto máximo da função da potência pela susceptância e a função `xvalue` é utilizada para obter o valor de $B_L$ correspondente para essa potência.

![Validação da parte imaginária da admitância (susceptância) de carga](../images/PLxBL_validation.png){width=300, #fig-y-imaginary-validation}

## Rede de adaptação {#sec-network-adapter}

```{python}
#| echo: false
Ri = RL
Ro = load_resistence(GL, BL)
```

Tendo a admitância calculada (e consequentemete a impedância), é possível realizar o cálculo da rede de adaptação. Aqui, deseja-se que o circuito equivalente do amplificador visualize a impedância obtida, sendo que a impedância de carga própriamente dita é de `{python} RL` $\Omega$. Dessa forma, deseja-se adaptar uma resistência de $R_i =$ `{python} RL` $\Omega$ em $R_o =$ `{python} format_2_decimals(Ro)` $\Omega$. Para os cálculos apresentados a seguir, considera-se $R_i$ como a impedância a ser adaptada e $R_o$ a impedância desejada. A Fig.\ref{fig:matching-network} apresenta o circuito com a rede de adaptação na topologia que será utilizada. Para essa rede de adaptação, buscou-se a topologia com o capacitor em série e o indutor em paralelo, uma vez que é desejado que o sinal de alta frequência seja tranferido à carga, enquanto bloqueia sinais de baixas frequências. Outra característica da topologia é que trata-se de uma rede L paralelo-série. Essa topologia é necessária, uma vez que deseja-se diminuir $R_i$ para se adaptar à resistência $R_o$ (equivalentemente, deseja-se elevar $R_o$ em relação a $R_i$).

```{=latex}
\begin{figure}[h]
  \centering
    \begin{circuitikz}[american]
      \draw (-1, 0) coordinate(point1) to[R, l=$R_i$] (-1, -3) node[ground]{} ;
      \draw (point1) to[short] (1.5, 0) coordinate(point2) to[L, l=L, a=$X_L$] (1.5, -3) node[ground]{} ;
      \draw (4, -3) coordinate(point3) node[ground]{} ;
      \draw (4, 0) coordinate(point4) to[R, l=$R_o$] (point3) ;
      \draw (point2) to[C, l=C, a=$X_C$] (point4) ;

      \draw (2, -3.5) -- ++(0, 1) to[short] ++(0.05, 0) to[short, i=$Z_i$] ++(0.2,0) ;
    \end{circuitikz}
  \caption{Rede de adaptação}
  \label{fig:matching-network}
\end{figure}
```
Considerando a topologia de rede de adaptação apresentada na Fig.\ref{fig:matching-network}, tem-se que @steer2019microwave

$$
  Z_i=R_o+jX_s
$$

e a rede de adaptação tem o objetivo de obter $Z_i=R_i\parallelsum\left(jX_p\right)$, assim,

$$
  \begin{split}
    Z_i&=\frac{jR_iX_p}{R_i+jX_p}\implies\\
    &=\frac{R_iX_p^2}{R_i^2+X_p^2} + j\frac{R_i^2X_p}{R_i^2+X_p^2}
  \end{split}
$$

Dessa forma, obtém-se

$$
  R_o=\frac{R_iX_p^2}{R_i^2+X_p^2}
$$ {#eq-matching-network-R_o}

e

$$
  X_s=\frac{R_i^2X_p}{R_i^2+X_p^2}
$$ {#eq-matching-network-X_s}

Antes de prosseguir, calculam-se os fatores de qualidade para dos elementos reativos em série e em paralelo, $X_s$ e $X_p$, respectivamente.

Como já é de conhecimento, o fator de qualidade ($Q$) é a razão entre a energia média armazenada no elemento reativo na frequência de ressonância (potência reativa) e a potência dissipada @steer2019microwave. Para um elemento reativo de impedância $X_s$, em série com um resistor $R_s$, a energia média armazenada no elemento reativo, $P_{as}$, é dada por

$$
  P_{as}=I_\text{rms}^2X_s
$$

Enquanto que a potência dissipada, $P_d$, é dada por

$$
  P_d=I_\text{rms}^2R_s
$$

Consequentemente, o fator de qualidade, $Q_s$, para o reativo em série é calculado como

$$
  \begin{split}
    Q_s&=\frac{I_\text{rms}^2X_s}{I_\text{rms}^2R_s}\implies\\
    &=\frac{X_s}{R_s}
  \end{split}
$$

Por outro lado, se é desejado calcular o fator de qualidade, $Q_p$, para o elemento reativo, $X_p$, em paralelo com um resistor, $R_p$, essa equação é dada por

$$
  \begin{split}
    Q_p&=\frac{V_\text{rms}^2/X_p}{V_\text{rms}^2/R_p}\implies\\
    &=\frac{R_p}{X_p}
  \end{split}
$$

Tendo essas relações, é possível estabelecer que, para a rede apresentada,

$$
  Q_p=\frac{R_i}{X_p}
$$

e

$$
  Q_s=\frac{X_s}{R_o}
$$

Sendo assim, utiliza-se a [Eq. @eq-matching-network-X_s] para chegar à seguinte conclusão

$$
  \begin{split}
    \frac{X_s}{R_o}&=\frac{R_i^2X_p}{R_iX_p^2}=\frac{R_i}{X_p}
  \end{split}
$$

Ou seja, $\left|Q_s\right|=\left|Q_p\right|$ (nesse caso, até mesmo $Q_s=Q_p$). Após isso, calcula-se

$$
  \begin{split}
    \frac{R_i}{R_o}&=R_i\frac{R_i^2+X_p^2}{R_iX_p^2}\implies\\
    &=\frac{R_i^2+X_p^2}{X_p^2}\implies\\
    &=\frac{R_i^2}{X_p^2}+1\implies\\
    \frac{R_i}{R_o}-1&=\left(\frac{R_i}{X_p}\right)^2
  \end{split}
$$

Isolando $R_i/X_p$, obtém-se

$$
  \frac{R_i}{X_p}=\sqrt{\frac{R_i}{R_o}-1}
$$

Que é exatamente uma das expressões para os fatores de qualidade. Sendo assim,

$$
  \left|Q_s\right|=\left|Q_p\right|=\sqrt{\frac{R_i}{R_o}-1}
$$

```{python}
#| echo: false
def format_decimal(value, prec):
  return '{:.{prec}f}'.format(value, prec=prec)
```

```{python}
#| echo: false
import math

Q = Qs = Qp = math.sqrt(Ri/Ro-1)
Xp = Ri/Qp
Xs = Ro*Qs
```

Assim, aplicando os valores, obtém-se $Q_s = Q_p =$ `{python} format_decimal(Qs, 3)`. Dessa forma, a impedância em série é dada por $X_s =$ `{python} format(Xs)`$\Omega$ e a impedância em paralelo $X_p =$ `{python} format(Xp)`$\Omega$. 

Como a impedância em série trata-se de um capacitor, o valor desse capacitor, $C$, é dado por

$$
  \begin{split}
    X_s&=\frac{1}{\omega C}\implies\\
    C&=\frac{1}{\omega X_s}
  \end{split}
$$

```{python}
#| echo: false
C = 1/(omega*Xs)
```

que, aplicando os valores, obtêm-se $C =$ `{python} format(C)`F. Em paralelo, a impedância é de um indutor. Dessa forma, a indutância necessária para realizar a adaptação de impedância é de

$$
\begin{split}
  X_p&=\omega L\implies\\
  L&=\frac{X_p}{\omega}
\end{split}
$$

```{python}
#| echo: false
L = Xp/omega
```

Ao aplicar os valores à equação, a indutância resultante é de $L =$ `{python} format(L)`H.

A rede de adaptação até esse ponto aqui, só da parte real. Entretanto, olhando para a Fig.\ref{fig:original-circuit}, ainda é necessário anular o efeito do indutor $L$. Para anular essa indutância, calcula-se um capacitor, $C_1$, de mesma admitância, $B_s$ (impedância), que será disposto em paralelo com o indutor. O valor dessa capacitância é dado por

$$
  \begin{split} 
    \omega L&=\frac{1}{\omega C_1}\implies\\
    C_1&=\frac{1}{\omega^2 L}
  \end{split}
$$

```{python}
#| echo: false
C1=1/(omega**2 * Ls)
```

Aplicando os valores à equação, obtém-se $C_1 =$ `{python} format(C1)`F. Entretanto, esse capacitor em paralelo não fornece exatamente a admitância calculada na seção anterior, além disso, como é apresentado na [Seção @sec-network-adapter-validation], percebe-se que a topologia da rede está mais próxima de uma rede do tipo Pi do que L. Como a impedância não é a que foi calculada, as restrições de máxima potência na carga, com eficiência de `{python} eta*100`%, não serão atingidas. Uma alteração que pode ser aplicada é calcular um capacitor em série, equivalente ao que foi projetado em paralelo. Assim, deseja-se calcular um capacitor $C_i^{'}$ que seja equivalente ao paralelo. Para isso, primeiro calcula-se o fator de qualidade como se segue

$$
    Q=\frac{\omega C_i}{G_i}
$$

```{python}
#| echo: false
Q_line = (omega*C1)/GL
```

 e esse fator de qualidade é referente ao capacitor em paralelo e a condutância de carga, $G_i$. Aplicando os valores, obtém-se um fator de qualidade, $Q =$ `{python} format_decimal(Q_line, 4)`. Em seguida, é possível calcular o capacitor em série, $C_1^{'}$, do circuito transformado como

$$
    C_1^{'}=\left(1+Q^{-2}\right)C_1
$$

```{python}
#| echo: false
C1_line=(1+Q_line**(-2))*C1
```

Finalmente, obtém-se uma capacitância $C_1^{'} =$ `{python} format(C1_line)`F em série.

## Validação da Rede de adaptação {#sec-network-adapter-validation}

A intenção dessa validação é atestar se, ao acoplar a rede de adaptação, apresentada na [Seção @sec-network-adapter], a um circuito cuja carga seja `{python} RL` $\Omega$ a impedância obtida, do ponto de vista da fonte, seja de `{python} format_2_decimals(Ro)` $\Omega$.

A rede de adaptação acoplada a um circuito de verificação pode ser visualizada na [Fig. @fig-network-adapter-verification-result]. Pode parecer que a rede de adaptação está invertida em relação à Fig.\ref{fig:matching-network}, mas é a mesma, uma vez que é necessário que o indutor esteja em paralelo com a carga. Além disso, pode-se verificar a aplicação dos valores obtidos para o capacitor e para o indutor e os resultados obtidos com o acoplamento da rede de ataptação.

![Resultados da rede de adaptação projetada](../images/network-adapter-verification-results.png){width=300, #fig-network-adapter-verification-result}

Os resultados apresentados confirmam todos os cálculos que foram feitos até então. Em seguida, na [Fig. @fig-complete-network-adapter-shuntC], é apresentado os resultados com esse capacitor acoplado ao circuito de teste.

![Resultados da rede de adaptação com capacitor em paralelo](../images/complete-network-adapter-shuntC.png){width=300, #fig-complete-network-adapter-shuntC}

Pode-se perceber que os resultados da impedância não são os que foram obtidos de maneira analítica. Dessa forma, essa topologia não se adequou às necessidades do projeto. Uma das formas que foi encontrada para adequar o circuito, de forma que seja obtida a impedância desajada, é transformar esse capacitor em parlelo, em um capacitor em série. Essa etapa também foi realizada na [Seção @sec-network-adapter] e os resultados obtidos são apresentados na [Fig. @fig-complete-network-adapter-seriesC]. Com essa alteração, o circuito apresenta exatamente a impedância calculada.

![Resultados da rede de adaptação com capacitor em série](../images/complete-network-adapter-seriesC.png){width=300, #fig-complete-network-adapter-seriesC}

```{python}
#| echo: false
C_eq=1/(1/C+1/C1_line)
```

Uma outra alteração que é interessante de ser realizada é obter um capacitor equivalente, fazendo com que somente um capacitor seja necessário. O capacitor equivalente é $C =$ `{python} format(C_eq)`F. Com essa modificação, a impedância continua conforme o que foi projetado, atendendo aos requisitos do projeto. A rede de adaptação final é apresentada na [Fig. @fig-complete-network-adapter-equivalentC].

![Resultados da rede de adaptação final](../images/complete-network-adapter-equivalentC.png){width=300, #fig-complete-network-adapter-equivalentC}

Em seguida, esse mesmo circuito de adaptação de impedância é acoplado ao circuito do amplificador. A [Fig. @fig-matching-network-test]. Percebe-se que o critério da eficiência foi atendido, bem como a máxima potência possível na carga. Dessa forma, pode-se concluir que esta rede de adaptação é adequada às necessidades desse projeto.

![Teste da rede de adaptação completa](../images/matching-network-test.png){width=300, #fig-matching-network-test}

# Estudo de robustez

```{python}
#| echo: false
component_tolerance = 5
variation_tolerance = 5
variation_eff = eta*variation_tolerance/100
eff_min = (eta - variation_eff)*100
eff_max = (eta + variation_eff)*100

variation_PL = PL*variation_tolerance/100
PL_min = PL - variation_PL
PL_max = PL + variation_PL
```

O objetivo desta Seção é validar se o circuito mantém o comportamento adequado, mesmo que haja uma variação nos componentes da rede de adaptação. Para validar o circuito sob a tolerância dos componentes, será utilizado o mesmo *test-bench* apresentado na [Fig. @fig-matching-network-test]. Com a diferença de que será aplicada uma tolerância de `{python} component_tolerance`%. Além disso, será avaliada a média e os valores referentes à variação de $3\sigma$. Para concluir que o projeto é inadequado, será inferido que aproximadamente 99% das iterações tenham uma variação de no máximo, 5%. Dessa forma, espera-se que 99% dos casos estejam entre `{python} format_decimal(eff_min, 0)`% e `{python} format_decimal(eff_max, 0)`% para a eficiência e entre `{python} format(PL_min)`W e `{python} format(PL_max)`W para a potência na carga.

::: {#fig-pdf-0R5dB}
```{python}
#| echo: false
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import lognorm

# Lendo o arquivo CSV
df = pd.read_csv('../../Output/efficiency-points.csv', delimiter=';', quotechar='"')
valores = df['r n*100']

# Calculando média e desvio padrão
media = np.mean(valores)
desvio_padrao = np.std(valores)

# Ajuste para a distribuição log-normal
shape, loc, scale = lognorm.fit(valores, floc=0)  # Fixando loc=0 para evitar deslocamento

# Criando valores para a curva de densidade log-normal
x = np.linspace(min(valores), max(valores), 1000)
densidade_log_normal = lognorm.pdf(x, shape, loc=loc, scale=scale)

# Plotando o histograma com contagem de ocorrências
plt.figure(figsize=(8, 6))
contagens, bins, _ = plt.hist(valores, bins=20, density=False, color='blue', alpha=0.7, edgecolor='black')

# Ajustando a curva de densidade log-normal para escala de contagens
densidade_log_normal_escala = densidade_log_normal * len(valores) * (bins[1] - bins[0])

# Plotando a curva de densidade ajustada para contagens
plt.plot(x, densidade_log_normal_escala, color='purple', linewidth=2, label='PDF')

# Adicionando linhas para média e desvio padrão
plt.axvline(media, color='red', linestyle='dashed', linewidth=2, label='Média')
plt.axvline(media + 3 * desvio_padrao, color='green', linestyle='dashed', linewidth=2, label='+3σ')
plt.axvline(media - 3 * desvio_padrao, color='orange', linestyle='dashed', linewidth=2, label='-3σ')

# Adicionando título e rótulos
plt.xlabel('Eficiência (%)')
plt.ylabel('Ocorrências')
plt.legend()
plt.tight_layout()
plt.show()
```
Distribuição da eficiência 
:::

::: {#fig-pdf-0R5dB}
```{python}
#| echo: false
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import lognorm

# Lendo o arquivo CSV
df = pd.read_csv('../../Output/power-points.csv', delimiter=';', quotechar='"')
valores = df['r PL*1000']

# Calculando média e desvio padrão
media = np.mean(valores)
desvio_padrao = np.std(valores)

# Ajuste para a distribuição log-normal
shape, loc, scale = lognorm.fit(valores, floc=0)  # Fixando loc=0 para evitar deslocamento

# Criando valores para a curva de densidade log-normal
x = np.linspace(min(valores), max(valores), 1000)
densidade_log_normal = lognorm.pdf(x, shape, loc=loc, scale=scale)

# Plotando o histograma com contagem de ocorrências
plt.figure(figsize=(8, 6))
contagens, bins, _ = plt.hist(valores, bins=20, density=False, color='blue', alpha=0.7, edgecolor='black')

# Ajustando a curva de densidade log-normal para escala de contagens
densidade_log_normal_escala = densidade_log_normal * len(valores) * (bins[1] - bins[0])

# Plotando a curva de densidade ajustada para contagens
plt.plot(x, densidade_log_normal_escala, color='purple', linewidth=2, label='PDF')

# Adicionando linhas para média e desvio padrão
plt.axvline(media, color='red', linestyle='dashed', linewidth=2, label='Média')
plt.axvline(media + 3 * desvio_padrao, color='green', linestyle='dashed', linewidth=2, label='+3σ')
plt.axvline(media - 3 * desvio_padrao, color='orange', linestyle='dashed', linewidth=2, label='-3σ')

# Adicionando título e rótulos
plt.xlabel('Potência na carga (mW)')
plt.ylabel('Ocorrências')
plt.legend()
plt.tight_layout()
plt.show()
```
Distribuição da potência na carga 
:::

# References {-}
